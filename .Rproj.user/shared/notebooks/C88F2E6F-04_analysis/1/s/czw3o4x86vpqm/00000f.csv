"0","# Top X/ranking for select_one type questions "
"0","select_one_topX <- function(df, question_name, X = 3) { # by default return top 3"
"0","  # test message"
"0","  if(length(colnames(df)[grepl(question_name, colnames(df), fixed = T)]) == 0) {"
"0","    stop(print(paste(""question name:"", question_name, ""doesn't exist in the main dataset. Please double check and make required changes!"")))"
"0","  }"
"0","  "
"0","  df <- df %>%"
"0","    select(!!sym(question_name))%>%          "
"0","    filter(!is.na(!!sym(question_name))) %>% # remove NA values from percentage calculations "
"0","    mutate_at(question_name, as.factor) %>%  # added to have all groups"
"0","    group_by(!!sym(question_name), .drop=F) %>% "
"0","    summarise(n = n()) %>%"
"0","    mutate(percentages = round(n / sum(n) * 100, digits = 2)) %>%"
"0","    arrange(desc(percentages)) %>% "
"0","    mutate_at(question_name, as.character) %>% "
"0","    head(X)   # keep top X percentages only "
"0","  "
"0","  if(nrow(df) == 0) warning(""None of the choices was selected!"")"
"0"," "
"0","  return(df)"
"0","}"
"0",""
"0","# return top 4 shelter types"
"0","shelter_type_top4 <- select_one_topX(df = main_dataset, question_name = ""e1_shelter_type"", X = 4)"
